// Generated by gencpp from file serial_node/imu_msg.msg
// DO NOT EDIT!


#ifndef SERIAL_NODE_MESSAGE_IMU_MSG_H
#define SERIAL_NODE_MESSAGE_IMU_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_node
{
template <class ContainerAllocator>
struct imu_msg_
{
  typedef imu_msg_<ContainerAllocator> Type;

  imu_msg_()
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)  {
    }
  imu_msg_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::serial_node::imu_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_node::imu_msg_<ContainerAllocator> const> ConstPtr;

}; // struct imu_msg_

typedef ::serial_node::imu_msg_<std::allocator<void> > imu_msg;

typedef boost::shared_ptr< ::serial_node::imu_msg > imu_msgPtr;
typedef boost::shared_ptr< ::serial_node::imu_msg const> imu_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_node::imu_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_node::imu_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_node::imu_msg_<ContainerAllocator1> & lhs, const ::serial_node::imu_msg_<ContainerAllocator2> & rhs)
{
  return lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_node::imu_msg_<ContainerAllocator1> & lhs, const ::serial_node::imu_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_node::imu_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_node::imu_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_node::imu_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_node::imu_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_node::imu_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_node::imu_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_node::imu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cdafae0cb68983e8e8825adb0b735f2";
  }

  static const char* value(const ::serial_node::imu_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cdafae0cb68983eULL;
  static const uint64_t static_value2 = 0x8e8825adb0b735f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_node::imu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_node/imu_msg";
  }

  static const char* value(const ::serial_node::imu_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_node::imu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch\n"
"float32 roll\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::serial_node::imu_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_node::imu_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_node::imu_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_node::imu_msg_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_NODE_MESSAGE_IMU_MSG_H
